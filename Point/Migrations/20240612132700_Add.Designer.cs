// <auto-generated />
using System;
using GWeb.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Point.Migrations
{
    [DbContext(typeof(girlContext))]
    [Migration("20240612132700_Add")]
    partial class Add
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci")
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("GWeb.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("HeadImgUrl")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsMerchant")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NickName")
                        .HasColumnType("longtext");

                    b.Property<string>("OpenId")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Point.Models.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ApprovedParticipantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("FeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FeeDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsApprovedParticipantVisible")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ActivityId");

                    b.HasIndex("ApprovedParticipantId");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Point.Models.ActivityStep", b =>
                {
                    b.Property<int>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("StepEndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("StepStartTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("StepId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityStep");
                });

            modelBuilder.Entity("Point.Models.ActivityType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ParentTypeId")
                        .HasColumnType("int");

                    b.HasKey("TypeId");

                    b.HasIndex("ParentTypeId");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("Point.Models.LotteryActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HaveParticipants")
                        .HasColumnType("int");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("image")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.ToTable("LotteryActivitys");
                });

            modelBuilder.Entity("Point.Models.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<int>("LotteryActivityId")
                        .HasColumnType("int");

                    b.Property<string>("NickName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("Verify")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Winner")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Point.Models.Activity", b =>
                {
                    b.HasOne("GWeb.Models.User", "ApprovedParticipant")
                        .WithMany()
                        .HasForeignKey("ApprovedParticipantId");

                    b.HasOne("GWeb.Models.User", "Organizer")
                        .WithMany()
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Point.Models.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityType");

                    b.Navigation("ApprovedParticipant");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("Point.Models.ActivityStep", b =>
                {
                    b.HasOne("Point.Models.Activity", "Activity")
                        .WithMany("ActivitySteps")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Point.Models.ActivityType", b =>
                {
                    b.HasOne("Point.Models.ActivityType", "ParentType")
                        .WithMany("SubTypes")
                        .HasForeignKey("ParentTypeId");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Point.Models.LotteryActivity", b =>
                {
                    b.HasOne("GWeb.Models.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.Navigation("CreatorUser");
                });

            modelBuilder.Entity("Point.Models.Participant", b =>
                {
                    b.HasOne("Point.Models.Activity", null)
                        .WithMany("Participants")
                        .HasForeignKey("ActivityId");
                });

            modelBuilder.Entity("Point.Models.Activity", b =>
                {
                    b.Navigation("ActivitySteps");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Point.Models.ActivityType", b =>
                {
                    b.Navigation("SubTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
